#!/bin/bash

# This is the central piece of LibNet which loads all libraries and reads
# the command queue

# This is a network-library that does
# - lib_captive: create and administer a captive portal
# - lib_isp: interact with ISPs - we want to have
#   - lib_isp_tigo: Tigo USB-key
#   - lib_isp_prestabist: Prestabist modem
#   - lib_isp_tawali: Tawali USB-key
#   - lib_isp_airtel: Airtel USB-key
# - lib_misc: small hacks like mail-queue and synching

# Don't need to change anything below this lines...

. $MCAPTIVE

if [ "$FAKE_IP" = "true" ]; then
  iptables(){
    log Iptables $@
  }
  ip(){
    log ip $@
  }
fi

mkdir -p $RUN $LOG
if [ "$ISP" != "simul" -a "$ISP" != "test" ]; then
  WWW_USER=$( egrep "(http|www-data)" /etc/passwd | sed -e "s/:.*//" )
  sudo chown -R $WWW_USER $RUN $LOG
fi

#
# Loading of other libraries
#

for lib in misc users captive isp; do
  . $WDIR/lib_$lib
done

#
# Let's call an eventual function and print some variables
#

lib_init(){
  captive_setup
  isp_setup
}

COUNT=0

#( sleep 1; log Empty reply; date > $REPLY ) &
msg_snd_rpl $( date )

log Starting dispatching queue and env to $ENV

COUNT=0
while true; do
  log Going to receive command
  line=$( msg_rcv_cmd )

  set $line
  cmd="$1"
  shift
  args="$@"
  COUNT=$(( COUNT + 1 ))
  log Got command -$cmd- with arguments -$args- and count -$COUNT-
  VAR=""
  case "$cmd" in
  init)
    log Doing lib_init
    ;;
  func)
    FUNC=$1
    shift
    C=$COUNT
    log Doing func: $FUNC $@ - $C
    $FUNC $@ > $REPLY.$C
    if [ -e $REPLY.$C ]; then
      log Replying $( cat $REPLY.$C )
      msg_snd_rpl "$( cat $REPLY.$C )"
      rm $REPLY.$C
    else
      log Empty reply
      msg_snd_rpl ""
    fi
    ;;
  async)
    FUNC=$1
    shift
    C=$COUNT
    log Doing async of: $FUNC $@ - $C
    $FUNC $@ > $REPLY.$C
    log return is $( cat $REPLY.$C )
    rm $REPLY.$C
    ;;
  restart)
    exit
    ;;
  count)
    COUNT=$(( COUNT + 1 ))
    log Counting: $COUNT
    msg_snd_rpl $COUNT
    #echo $COUNT > $REPLY
    ;;
  ping)
    msg_snd_rpl pong
    #echo pong > $REPLY
    ;;
  sleep)
    sleep 2
    msg_snd_rpl wakeup
    ;;
  esac
  set > $ENV.tmp
  mv $ENV.tmp $ENV
done
