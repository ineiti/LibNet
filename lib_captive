#!/bin/sh
#
# The captive library.
#
# Iptable-rules:
# filter:FCAPTIVE - should be called at the end of the filter:FORWARD-table
#   allows new users and finishes with a BLOCK
# nat:CAPTIVE - should be called at the end of the nat:PREROUTING-table
#   redirects all paying users to the nat:INTERNET rule, before DNATting them
#   to the localhost
# nat:INTERNET - redirects to the proxy or direct
#   internet-access

if [ "$LIB_CAPTIVE" = "loaded" ]; then
  return
fi
LIB_CAPTIVE=loaded

IPS_IDLE=$RUN/ips_idle
MAC_LIST=$LOG/allowed_macs
IP_LIST=$LOG/allowed_ips
RESTRICTED=$RUN/restricted
touch $MAC_LIST $IP_LIST $IPS_IDLE $RESTRICTED

IPNAT="iptables -t nat"

captive_ip(){
  iptables $1 FCAPTIVE -s $2 -j ACCEPT
  iptables $1 FCAPTIVE -d $2 -j ACCEPT
  $IPNAT $1 CAPTIVE -s $2 -j INTERNET
}

captive_ip_drop(){
  iptables $1 FCAPTIVE -s $2 -j DROP
  iptables $1 FCAPTIVE -d $2 -j DROP
}

captive_ip_accept(){
  captive_ip -I $1
}

captive_ip_deny(){
  captive_ip -D $1
}

captive_ip_check(){
  if [ "$1" ]; then
    grep -q $1 $IP_LIST
  fi
}

captive_ip_add(){
  if ! captive_ip_check $1; then
    echo $1 >> $IP_LIST
    captive_ip_accept $1
  fi
}

captive_ip_del(){
  grep -v $1 $IP_LIST > /tmp/ips
  mv /tmp/ips $IP_LIST
  captive_ip_deny $1
}

captive_mac_accept(){
  if ! iptables -L FCAPTIVE -n | grep -qi $1; then
    MAC_IPT="-m mac --mac-source $1"
    iptables -I FCAPTIVE $MAC_IPT -j ACCEPT
    $IPNAT -I CAPTIVE $MAC_IPT -j INTERNET
  fi
}

captive_mac_deny(){
  if iptables -L FCAPTIVE -n | grep -qi $1; then
    MAC_IPT="-m mac --mac-source $1"
    iptables -D FCAPTIVE $MAC_IPT -j ACCEPT
    $IPNAT -D CAPTIVE $MAC_IPT -j INTERNET
  fi
}

captive_mac_check(){
  if [ "$1" ]; then
    grep -q $1 $MAC_LIST
  fi
}

captive_mac_add(){
  if ! captive_mac_check $1; then
    echo $1 >> $MAC_LIST
    captive_mac_accept $1
  fi
}

captive_mac_del(){
  grep -v $1 $MAC_LIST > /tmp/macs
  mv /tmp/macs $MAC_LIST
  captive_mac_deny $1
}

captive_clear(){
  actionlog Clearing IPs and refreshing MACs
  $IPNAT -F CAPTIVE
  iptables -F FCAPTIVE
  iptables -I FCAPTIVE -j RETURN

  ALLOW_DHCP=${ALLOW_DHCP:-255.255.255.255}
  INTERNAL_IPS=${INTERNAL_IPS:-$( ip addr | grep "inet " | sed -e "s/.*inet \([^\/ ]*\).*/\1/" | grep -v 127.0.0.1 )}
  echo Internal is $INTERNAL_IPS
  for ip in $ALLOW_DHCP $INTERNAL_IPS $ALLOW_DST; do
    echo Allowing requests to $ip to go through
    $IPNAT -I NOCAPTIVE -d $ip -j ACCEPT
    iptables -I FCAPTIVE -d $ip -j ACCEPT
  done

  for ip in $ALLOW_SRC; do
    echo Allowing requests from $ip to go through
    $IPNAT -I NOCAPTIVE -s $ip -j ACCEPT
    iptables -I FCAPTIVE -s $ip -j ACCEPT
  done

  FIRST_INTERNAL=$( echo $INTERNAL_IPS | sed -e "s/ .*//" )
  $IPNAT -I CAPTIVE -j DNAT --to-dest ${CAPTIVE_DNAT:-$FIRST_INTERNAL}

  for ip in $( cat $IP_LIST ); do
    captive_ip_accept $ip
  done
  for mac in $( cat $MAC_LIST ); do
    captive_mac_accept $mac
  done
}

captive_accept_all(){
  captive_clear
  iptables -A FCAPTIVE -j ACCEPT
  $IPNAT -I CAPTIVE -j INTERNET
}

# This can be called from time to time to check on idle people
captive_cleanup(){
  if [ "$( isp_connection_status )" -lt 4 ]; then
    log not really connected
    return
  fi
  if [ "$( ips_connected )" ]; then
    for ip in $( ips_connected ); do
      PACKETS=$( iptables -L FCAPTIVE -nv | grep $ip | head -n 1 | sed -e "s/ *\([^ ]*\).*/\1/" )
      log Checking ip $ip - has $PACKETS packets
      if [ ! "$PACKETS" ]; then
        actionlog Still in $USERS_CONNECTED, but not in iptables
        users_connected_delete $ip
        remove_line "^$ip\$" $IPS_IDLE
      elif [ "$PACKETS" = 0 ]; then
        if egrep -q "^$ip\$" $IPS_IDLE; then
          actionlog No packets, kicking $ip
          user_disconnect_ip $ip
          remove_line "^$ip\$" $IPS_IDLE
        else
          log $ip is idle, adding to list
          echo $ip >> $IPS_IDLE
        fi
      else
        remove_line "^$ip\$" $IPS_IDLE 
      fi
    done
  elif [ "$CONNECTION_TYPE" = "ondemand" ]; then
    isp_connection_stop
  fi
#  log Clearing counters
  iptables -Z FCAPTIVE
#  cp $USERS_CONNECTED $USERS_CONNECTED.tmp
}

delete_chain(){
  PARENT="$1"
  CHAIN="$2"
  IPT="iptables"
  if [ "$3" ]; then
    IPT="$IPT -t $3"
  fi
  if $IPT -L $PARENT -n | grep -q $CHAIN; then
    if [ "$PARENT" ]; then
      $IPT -D $PARENT -j $CHAIN
    fi
    $IPT -F $CHAIN
    $IPT -X $CHAIN
  fi
  $IPT -N $CHAIN
  if [ "$PARENT" ]; then
    $IPT -I $PARENT -j $CHAIN
  fi
}

captive_setup(){
  echo Setting up
  PREROUTING=${PREROUTING:-PREROUTING}
  delete_chain $PREROUTING CAPTIVE nat

  delete_chain $PREROUTING NOCAPTIVE nat

  delete_chain "" INTERNET nat
  if [ "$HTTP_PROXY" ]; then
    $IPNAT -A INTERNET -p tcp --dport 80 -j DNAT --to-dest $HTTP_PROXY
  fi
  $IPNAT -A INTERNET -j ACCEPT

  delete_chain FORWARD FCAPTIVE
  iptables -I FCAPTIVE -j RETURN
  iptables -P FORWARD DROP

  captive_clear

  for ip in $( ips_connected ); do
    captive_ip_accept $ip
  done

  if [ "$( captive_restriction_get )" ]; then
    captive_restriction_set $( captive_restriction_get )
  fi
}

captive_block(){
  log Blocking $1
}

captive_rest_addr(){
  for ip in 10.1.0.0/24 10.0.10.0/21 10.1.10.0/21 10.2.10.0/21; do
    captive_ip_drop $1 $ip
  done
  if [ "$1" = "-I" ]; then
    captive_ip_accept 10.9.0.0/16
    captive_ip_accept 10.1.14.0/24
  else
    captive_ip_deny 10.9.0.0/16
    captive_ip_deny 10.1.14.0/24
  fi
}

captive_rest_add(){
  captive_rest_addr -I
  if [ "$1" ]; then
    captive_ip_accept $1
  fi
}

captive_rest_del(){
  captive_rest_addr -D
  if [ "$1" ]; then
    captive_ip_deny $1
  fi
}

captive_rest_txt_ip(){
  case "$1" in
    info1)
      echo 10.1.11.0/24
      ;;
    info2)
      echo 10.1.12.0/24
      ;;
    *)
      echo ""
      ;;
  esac
}

captive_restriction_set(){
  log restricting -$REST-
  OLDREST=$( captive_restriction_get )
  if [ "$OLDREST" ]; then
    captive_rest_del $( captive_rest_txt_ip $OLDREST )
  fi
  REST=$1
  case $REST in
    info1|info2)
      captive_rest_add $( captive_rest_txt_ip $REST )
      ;;
    *)
      REST=""
  esac
  echo $REST > $RESTRICTED
}

captive_restriction_get(){
  log Restriction get $( cat $RESTRICTED )
  cat $RESTRICTED
}
