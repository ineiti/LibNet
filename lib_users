#!/bin/bash

USERS=/etc/captive.users
USERS_CONNECTED=$RUN/connected
touch $USERS_CONNECTED

users_connected_delete(){
  egrep -v "^$1 " $USERS_CONNECTED > /tmp/uc
  mv /tmp/uc $USERS_CONNECTED
}

users_check(){
  USER=$( echo $1 | sed -e "s/ //g" | tr A-Z a-z | tr -cd a-z0-9_- )
  LINE=$( egrep -i "^$USER:" $USERS )                             
  if [ -z "$LINE" ]; then                                                                                  
    PASS=""                     
    LEVEL=0
  else                                                                               
    PASS=$( echo $LINE | cut -f 2 -d ":" )
    LEVEL=$( echo $LINE | cut -f 3 -d ":" )
  fi                                                 
  if [ "$2" -a "$2" = "$PASS" ]; then                                
    USER_OK="true"
  elif [ "$USER" -a "$2" ]; then                                            
    if [ "$2" ]; then                                            
      USER_OK="wrong"
    else                                           
      USER_OK="add"                                                                         
    fi          
  else
    USER_OK="nothing"
  fi
  if [ "$FORM_signup" ]; then
    USER_OK="add"
  fi
}

users_connected(){
  cat $USERS_CONNECTED | sed -e "s/.* //"
}

ips_connected(){
  cat $USERS_CONNECTED | sed -e "s/ .*//"
}

users_level(){
  USER=$1
  LINE=$( egrep "^$USER:" $USERS )
  echo $LINE | cut -f 3 -d :
}

users_high_level(){
  USERS_HIGH=""
  for u in $( users_connected ); do
    if [ $( users_level $u ) -gt 2 ]; then
      USERS_HIGH="$USERS_HIGH $u"
    fi
  done
  echo -n $USERS_HIGH
}

users_mac(){
  USERS_MAC=""
  for p in $( iptables -L FCAPTIVE -nv | grep MAC | sed -e "s/ *\([0-9]*\).*/\1/" ); do
    if [ $p -gt 0 ]; then
      USERS_MAC="mac"
    fi
  done
  echo -n $USERS_MAC
}

users_low_level(){
  USERS_LOW=""
  for u in $( users_connected ); do
    if [ $( users_level $u ) -lt 3 ]; then
      USERS_LOW="$USERS_LOW $u"
    fi
  done
  echo -n $USERS_LOW
}

user_connected(){
  log "Searching if user $1 is connected"
  if users_connected | egrep -q "^$1\$"; then
    echo yes
  else
    echo no
  fi
}

user_connect(){
  IP=$1
  NAME=$2

  isp_connect

  if [ $( user_connected $NAME ) = "yes" ]; then
    log User $NAME already connected
  else
    KEEP_PPP=""
    if egrep -q "^$IP " $USERS_CONNECTED; then
      log IP $IP already connected, first disconnecting old user
      KEEP_PPP="$IP keep_ppp"
      echo $KEEP_PPP >> $USERS_CONNECTED
      user_disconnect_ip $IP
    fi

    log Connecting user $NAME - $IP
    echo $IP $NAME >> $USERS_CONNECTED
    captive_ip_accept $IP
    if [ "$KEEP_PPP" ]; then
      user_disconnect $KEEP_PPP
    fi
  fi
}

user_disconnect_name(){
  user_disconnect $( egrep " $1\$" $USERS_CONNECTED )
}

user_disconnect_ip(){
  for ip in $( egrep "^$1 " $USERS_CONNECTED | sed -e "s/ /:/" ); do
    U=$( echo $ip | sed -e "s/:/ /" )
    log Disconnecting -$U-
    user_disconnect $U
  done
}

user_disconnect(){
  IP=$1
  NAME=$2

  log Got user $NAME from $IP
  if [ ! "$1" -o ! "$2" ]; then
    return
  fi
  if [ $( user_connected $NAME ) = "yes" ]; then
    log Doing disconnection of $NAME
    egrep -v "^$IP $NAME\$" $USERS_CONNECTED > /tmp/users.connected
    mv /tmp/users.connected $USERS_CONNECTED
    captive_ip_deny $IP
  else
    log User $NAME is not connected
  fi

  if [ ! -s $USERS_CONNECTED ]; then
    isp_may_disconnect
  fi
}

user_cost_max(){
  COST_MAX=$(( COST_BASE + COST_SHARED ))
  log Maximum cost is $COST_MAX
  echo $COST_MAX
}

user_cost_now(){
  USERS_CONNECTED=$( users_connected | wc -l )
  if [ "$USERS_CONNECTED" -gt 0 ]; then
    COST=$(( COST_BASE + COST_SHARED / USERS_CONNECTED ))
  else
    COST=$(( COST_BASE + COST_SHARED ))
  fi
  log Cost per user is $COST
  echo $COST
}

