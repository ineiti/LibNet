#!/bin/bash

# This is a network-library that does
# - lib_captive: create and administer a captive portal
# - lib_isp: interact with ISPs - we want to have
#   - lib_isp_tigo: Tigo USB-key
#   - lib_isp_prestabist: Prestabist modem
#   - lib_isp_tawali: Tawali USB-key
#   - lib_isp_airtel: Airtel USB-key
# - lib_misc: small hacks like mail-queue and synching

# Don't need to change anything below this lines...
WDIR=$( dirname ${BASH_SOURCE[0]} )
RUN=/var/run/lib-net
LOG=/var/log/lib-net
DATE=$( date +%y%m%d-%H.%M )
PATH=$PATH:/sbin:/usr/sbin
MCAPTIVE=$WDIR/multiconf-captive
FAKE_IP=false
if pwd | egrep -q "/Test$"; then
  MCAPTIVE=$PWD/multiconf-captive
  . $MCAPTIVE
  RUN=$PWD/run
  LOG=$PWD/log
  FAKE_IP=true
else
  if [ ! -x $MCAPTIVE ]; then
    cp $MCAPTIVE.orig $MCAPTIVE
  fi
  . $MCAPTIVE
fi

if [ "$ISP" = "simul" ]; then
  LOG=$WDIR/log
  RUN=$WDIR/run
  FAKE_IP=true
fi

CMDS=$RUN/cmd
REPLY=$RUN/reply
ENV=$RUN/env
RUN_PID=$RUN/pid
CONNSTAT=$RUN/connection
MSGS=$LOG/msgs.log
ACTIONLOG=$LOG/action.log
mkdir -p $RUN $LOG

#
# Different kind of logging facilities
#

msg() {
  WHO=$1
  shift
  echo $( date +%F_%R ) - $WHO: $@ >> $MSGS
}

log(){
  msg simple "$@"
#  logger -- $@
}

logf(){
  msg function "$@"
#  logger -- $@
}

loga(){
  msg action $@
  echo $DATE $@ >> $ACTIONLOG
}

#
# msg-setup
#

msg_check(){
  if [ ! -f $WDIR/Tools/msgtool ]; then
    gcc -o $WDIR/Tools/msgtool $WDIR/Tools/msgtool.c
  fi
}
msg_check

msg_delete(){
  log deleting msg-queues
  $WDIR/Tools/msgtool d 2
  $WDIR/Tools/msgtool d 3
  $WDIR/Tools/msgtool d
  log $( ipcs )
}

msg_setup(){
  msg_delete
  log Setting up
}

msg_snd_cmd(){
  log sending command $@
  $WDIR/Tools/msgtool s 2 "$*"
}

msg_rcv_cmd(){
  $WDIR/Tools/msgtool r 2
}

msg_snd_rpl(){
  log sending reply $@
  $WDIR/Tools/msgtool s 3 "$*"
}

msg_rcv_rpl(){
  RCV_REPLY=$( $WDIR/Tools/msgtool r 3 )
  log Reply is $RCV_REPLY
  echo $RCV_REPLY
}

#for f in $CMDS $REPLY; do
#  test -p $f || mkfifo $f
#done

start_queue(){
  log Starting queue
  msg_setup
  export WDIR RUN LOG DATE PATH MCAPTIVE FAKE_IP CMDS REPLY ENV RUN_PID CONNSTAT MSGS ACTIONLOG
  export -f msg_snd_cmd msg_rcv_cmd msg_snd_rpl msg_rcv_rpl msg log loga logf
  bash $WDIR/lib_queue &
  echo $! > $RUN_PID
  disown -a
  msg_rcv_rpl >> $LOG/start
  msg_snd_cmd ping
  msg_rcv_rpl >> $LOG/start
  #cat $REPLY >> $LOG/start
  #echo ping > $CMDS
  #cat $REPLY >> $LOG/start
}


#( 
#flock -e 200
if [ "$1" != "kill" ]; then
  if [ -f $RUN_PID ]; then
    if ! ps ax | grep -q "^ *$( cat $RUN_PID )"; then
      log Process is not running anymore - restarting
      start_queue
    fi
  fi

  if [ ! -f $RUN_PID ]; then
    log Process is not running - starting
    start_queue
  fi
fi

if [ "$1" ]; then
  VAR=""
  if [ $1 = init ]; then
    msg_snd_cmd lib_init
    #echo lib_init > $CMDS
    exit
  fi
  if [ $1 = print ]; then
    shift
    VAR=$1
    shift
  fi
  case "$1" in
  func|async)
    cmd=$1
    shift
    FUNC=$1
    shift
    msg_snd_cmd $cmd $FUNC $@
    #echo $cmd $FUNC $@ > $CMDS
    if [ $cmd = "func" ]; then
      #cat $REPLY
      msg_rcv_rpl
    fi
    ;;
  restart|reset)
    echo doing $@
    msg_snd_cmd $@
    #echo $@ > $CMDS
    ;;
  sleep)
    echo doing sleep
    msg_snd_cmd $@
    msg_rcv_rpl
    ;;
  count|ping)
    echo doing $@
    msg_snd_cmd $@
    msg_rcv_rpl
    #echo $@ > $CMDS
    #cat $REPLY
    ;;
  kill)
    log Killing process
    if [ -f $RUN_PID ]; then
      kill -9 $( cat $RUN_PID )
      rm $RUN_PID
    fi
    for p in check_ppp lib_queue msgtool comgt; do
      pkill -9 -f $p
    done
    msg_delete
    ;;
  esac
  if [ "$VAR" ]; then
    # There must be a better way to do that...
    grep "^$VAR=" $ENV | sed -e "s/.*=//"
  fi
fi
#) 200>/tmp/libnet.lockfile
