#!/bin/bash

# This is a network-library that does
# - lib_captive: create and administer a captive portal
# - lib_isp: interact with ISPs - we want to have
#   - lib_isp_tigo: Tigo USB-key
#   - lib_isp_prestabist: Prestabist modem
#   - lib_isp_tawali: Tawali USB-key
#   - lib_isp_airtel: Airtel USB-key
# - lib_misc: small hacks like mail-queue and synching

# Don't need to change anything below this lines...
WDIR=$( dirname ${BASH_SOURCE[0]} )
RUN=/var/run/lib-net
LOG=/var/log/lib-net
DATE=$( date +%y%m%d-%H.%M )
PATH=$PATH:/sbin:/usr/sbin
MCAPTIVE=$WDIR/multiconf-captive
if pwd | egrep -q "/Test$"; then
  MCAPTIVE=$PWD/multiconf-captive
  . $MCAPTIVE
  RUN=$PWD/run
  LOG=$PWD/log
  iptables(){
    log Iptables $@
  }
  ip(){
    log ip $@
  }
else
  if [ ! -x $MCAPTIVE ]; then
    cp $MCAPTIVE.orig $MCAPTIVE
  fi
  . $MCAPTIVE
fi

if [ "$ISP" = "simul" ]; then
  LOG=$WDIR/log
  RUN=$WDIR/run
  iptables(){
    log Iptables $@
  }
  ip(){
    log ip $@
  }
fi
CMDS=$RUN/cmd
ENV=$RUN/env
RUN_PID=$RUN/pid

test -p $CMDS || mkfifo $CMDS

if [ -f $RUN_PID ]; then
  if ! ps ax | grep -q "^ *$( cat $RUN_PID )"; then
    echo Process is not running anymore - restarting
    . $WDIR/lib_queue &
    echo $! > $RUN_PID
    cat $CMDS >> $LOG/start
  fi
fi

if [ ! -f $RUN_PID ]; then
  echo Process is not running - starting
  . $WDIR/lib_queue &
  echo $! > $RUN_PID
fi

if [ "$1" ]; then
  VAR=""
  if [ $1 = init ]; then
    echo lib_init > $CMDS
    exit
  fi
  if [ $1 = print ]; then
    shift
    VAR=$1
    shift
  fi
  case "$1" in
  func|async)
    cmd=$1
    shift
    FUNC=$1
    shift
    echo $cmd $FUNC $@ > $CMDS
    if [ $cmd = "func" ]; then
      cat $CMDS
    fi
    ;;
  restart|sleep)
    echo $@ > $CMDS
    ;;
  count)
    echo $@ > $CMDS
    cat $CMDS
    ;;
  esac
  if [ "$VAR" ]; then
    # There must be a better way to do that...
    grep "^$VAR=" $ENV | sed -e "s/.*=//"
  fi
fi
